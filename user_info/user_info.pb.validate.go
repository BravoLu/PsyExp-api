// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_info.proto

package grpc_user_info

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UserInfoValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PhoneNumber

	// no validation rules for UserName

	// no validation rules for Gender

	// no validation rules for UserType

	// no validation rules for Extra

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

func (m *UserInfo) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserInfo) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReqMultiError, or
// nil if none found.
func (m *RegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterReqValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterReqValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterReqValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Password

	if len(errors) > 0 {
		return RegisterReqMultiError(errors)
	}

	return nil
}

// RegisterReqMultiError is an error wrapping multiple validation errors
// returned by RegisterReq.ValidateAll() if the designated constraints aren't met.
type RegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReqMultiError) AllErrors() []error { return m }

// RegisterReqValidationError is the validation error returned by
// RegisterReq.Validate if the designated constraints aren't met.
type RegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReqValidationError) ErrorName() string { return "RegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReqValidationError{}

// Validate checks the field values on RegisterRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterRspMultiError, or
// nil if none found.
func (m *RegisterRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Uid

	if len(errors) > 0 {
		return RegisterRspMultiError(errors)
	}

	return nil
}

// RegisterRspMultiError is an error wrapping multiple validation errors
// returned by RegisterRsp.ValidateAll() if the designated constraints aren't met.
type RegisterRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRspMultiError) AllErrors() []error { return m }

// RegisterRspValidationError is the validation error returned by
// RegisterRsp.Validate if the designated constraints aren't met.
type RegisterRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRspValidationError) ErrorName() string { return "RegisterRspValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRspValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for PhoneNumber

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRspMultiError, or nil
// if none found.
func (m *LoginRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Uid

	if len(errors) > 0 {
		return LoginRspMultiError(errors)
	}

	return nil
}

// LoginRspMultiError is an error wrapping multiple validation errors returned
// by LoginRsp.ValidateAll() if the designated constraints aren't met.
type LoginRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRspMultiError) AllErrors() []error { return m }

// LoginRspValidationError is the validation error returned by
// LoginRsp.Validate if the designated constraints aren't met.
type LoginRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRspValidationError) ErrorName() string { return "LoginRspValidationError" }

// Error satisfies the builtin error interface
func (e LoginRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRspValidationError{}

// Validate checks the field values on QueryReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryReqMultiError, or nil
// if none found.
func (m *QueryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return QueryReqMultiError(errors)
	}

	return nil
}

// QueryReqMultiError is an error wrapping multiple validation errors returned
// by QueryReq.ValidateAll() if the designated constraints aren't met.
type QueryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryReqMultiError) AllErrors() []error { return m }

// QueryReqValidationError is the validation error returned by
// QueryReq.Validate if the designated constraints aren't met.
type QueryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryReqValidationError) ErrorName() string { return "QueryReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryReqValidationError{}

// Validate checks the field values on QueryRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryRspMultiError, or nil
// if none found.
func (m *QueryRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryRspValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryRspValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryRspValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryRspMultiError(errors)
	}

	return nil
}

// QueryRspMultiError is an error wrapping multiple validation errors returned
// by QueryRsp.ValidateAll() if the designated constraints aren't met.
type QueryRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRspMultiError) AllErrors() []error { return m }

// QueryRspValidationError is the validation error returned by
// QueryRsp.Validate if the designated constraints aren't met.
type QueryRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRspValidationError) ErrorName() string { return "QueryRspValidationError" }

// Error satisfies the builtin error interface
func (e QueryRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRspValidationError{}

// Validate checks the field values on UpdateUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateUserReqMultiError, or
// nil if none found.
func (m *UpdateUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Extra

	// no validation rules for Password

	if len(errors) > 0 {
		return UpdateUserReqMultiError(errors)
	}

	return nil
}

// UpdateUserReqMultiError is an error wrapping multiple validation errors
// returned by UpdateUserReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserReqMultiError) AllErrors() []error { return m }

// UpdateUserReqValidationError is the validation error returned by
// UpdateUserReq.Validate if the designated constraints aren't met.
type UpdateUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReqValidationError) ErrorName() string { return "UpdateUserReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReqValidationError{}

// Validate checks the field values on UpdateUserRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateUserRspMultiError, or
// nil if none found.
func (m *UpdateUserRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return UpdateUserRspMultiError(errors)
	}

	return nil
}

// UpdateUserRspMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRspMultiError) AllErrors() []error { return m }

// UpdateUserRspValidationError is the validation error returned by
// UpdateUserRsp.Validate if the designated constraints aren't met.
type UpdateUserRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRspValidationError) ErrorName() string { return "UpdateUserRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRspValidationError{}

// Validate checks the field values on ExistReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExistReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExistReqMultiError, or nil
// if none found.
func (m *ExistReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return ExistReqMultiError(errors)
	}

	return nil
}

// ExistReqMultiError is an error wrapping multiple validation errors returned
// by ExistReq.ValidateAll() if the designated constraints aren't met.
type ExistReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistReqMultiError) AllErrors() []error { return m }

// ExistReqValidationError is the validation error returned by
// ExistReq.Validate if the designated constraints aren't met.
type ExistReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistReqValidationError) ErrorName() string { return "ExistReqValidationError" }

// Error satisfies the builtin error interface
func (e ExistReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistReqValidationError{}

// Validate checks the field values on ExistRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExistRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExistRspMultiError, or nil
// if none found.
func (m *ExistRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Uid

	if len(errors) > 0 {
		return ExistRspMultiError(errors)
	}

	return nil
}

// ExistRspMultiError is an error wrapping multiple validation errors returned
// by ExistRsp.ValidateAll() if the designated constraints aren't met.
type ExistRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistRspMultiError) AllErrors() []error { return m }

// ExistRspValidationError is the validation error returned by
// ExistRsp.Validate if the designated constraints aren't met.
type ExistRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistRspValidationError) ErrorName() string { return "ExistRspValidationError" }

// Error satisfies the builtin error interface
func (e ExistRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistRspValidationError{}

// Validate checks the field values on QueryUsersReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryUsersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryUsersReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryUsersReqMultiError, or
// nil if none found.
func (m *QueryUsersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryUsersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryUsersReqMultiError(errors)
	}

	return nil
}

// QueryUsersReqMultiError is an error wrapping multiple validation errors
// returned by QueryUsersReq.ValidateAll() if the designated constraints
// aren't met.
type QueryUsersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryUsersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryUsersReqMultiError) AllErrors() []error { return m }

// QueryUsersReqValidationError is the validation error returned by
// QueryUsersReq.Validate if the designated constraints aren't met.
type QueryUsersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryUsersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryUsersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryUsersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryUsersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryUsersReqValidationError) ErrorName() string { return "QueryUsersReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryUsersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryUsersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryUsersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryUsersReqValidationError{}

// Validate checks the field values on QueryUsersRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryUsersRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryUsersRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryUsersRspMultiError, or
// nil if none found.
func (m *QueryUsersRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryUsersRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryUsersRspValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryUsersRspValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryUsersRspValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryUsersRspMultiError(errors)
	}

	return nil
}

// QueryUsersRspMultiError is an error wrapping multiple validation errors
// returned by QueryUsersRsp.ValidateAll() if the designated constraints
// aren't met.
type QueryUsersRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryUsersRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryUsersRspMultiError) AllErrors() []error { return m }

// QueryUsersRspValidationError is the validation error returned by
// QueryUsersRsp.Validate if the designated constraints aren't met.
type QueryUsersRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryUsersRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryUsersRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryUsersRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryUsersRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryUsersRspValidationError) ErrorName() string { return "QueryUsersRspValidationError" }

// Error satisfies the builtin error interface
func (e QueryUsersRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryUsersRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryUsersRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryUsersRspValidationError{}
