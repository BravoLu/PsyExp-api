// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: exp_info.proto

// import "validate.proto";

package grpc_exp_info

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubState int32

const (
	SubState_SubInvalid SubState = 0 //  非法状态
	SubState_Init       SubState = 1 //  初始态
	SubState_Approved   SubState = 2 //  同意
	SubState_Rejected   SubState = 3 //  回绝
)

// Enum value maps for SubState.
var (
	SubState_name = map[int32]string{
		0: "SubInvalid",
		1: "Init",
		2: "Approved",
		3: "Rejected",
	}
	SubState_value = map[string]int32{
		"SubInvalid": 0,
		"Init":       1,
		"Approved":   2,
		"Rejected":   3,
	}
)

func (x SubState) Enum() *SubState {
	p := new(SubState)
	*p = x
	return p
}

func (x SubState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubState) Descriptor() protoreflect.EnumDescriptor {
	return file_exp_info_proto_enumTypes[0].Descriptor()
}

func (SubState) Type() protoreflect.EnumType {
	return &file_exp_info_proto_enumTypes[0]
}

func (x SubState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubState.Descriptor instead.
func (SubState) EnumDescriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{0}
}

type ExpState int32

const (
	ExpState_Invalid   ExpState = 0
	ExpState_Draft     ExpState = 1
	ExpState_Published ExpState = 2
	ExpState_Finished  ExpState = 3
	ExpState_Closed    ExpState = 4
	ExpState_Deleted   ExpState = 5
)

// Enum value maps for ExpState.
var (
	ExpState_name = map[int32]string{
		0: "Invalid",
		1: "Draft",
		2: "Published",
		3: "Finished",
		4: "Closed",
		5: "Deleted",
	}
	ExpState_value = map[string]int32{
		"Invalid":   0,
		"Draft":     1,
		"Published": 2,
		"Finished":  3,
		"Closed":    4,
		"Deleted":   5,
	}
)

func (x ExpState) Enum() *ExpState {
	p := new(ExpState)
	*p = x
	return p
}

func (x ExpState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpState) Descriptor() protoreflect.EnumDescriptor {
	return file_exp_info_proto_enumTypes[1].Descriptor()
}

func (ExpState) Type() protoreflect.EnumType {
	return &file_exp_info_proto_enumTypes[1]
}

func (x ExpState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpState.Descriptor instead.
func (ExpState) EnumDescriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{1}
}

type SubInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid        string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`                                                      // 被试记录id
	Eid        int64    `protobuf:"varint,2,opt,name=eid,proto3" json:"eid,omitempty"`                                                     // 实验id
	Pid        int64    `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`                                                     // 被试用户id
	FinishedAt string   `protobuf:"bytes,4,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`                      // 实验耗时
	State      SubState `protobuf:"varint,5,opt,name=state,proto3,enum=grpc.bravo_studio.exp_info_server.SubState" json:"state,omitempty"` // 被试记录状态
	CreateTime string   `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime string   `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *SubInfo) Reset() {
	*x = SubInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubInfo) ProtoMessage() {}

func (x *SubInfo) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubInfo.ProtoReflect.Descriptor instead.
func (*SubInfo) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{0}
}

func (x *SubInfo) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *SubInfo) GetEid() int64 {
	if x != nil {
		return x.Eid
	}
	return 0
}

func (x *SubInfo) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *SubInfo) GetFinishedAt() string {
	if x != nil {
		return x.FinishedAt
	}
	return ""
}

func (x *SubInfo) GetState() SubState {
	if x != nil {
		return x.State
	}
	return SubState_SubInvalid
}

func (x *SubInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *SubInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type ExpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eid        int64    `protobuf:"varint,1,opt,name=eid,proto3" json:"eid,omitempty"`                                                     //  实验id
	Title      string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                  //  实验标题
	Desc       string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`                                                    //  实验描述
	Rid        int64    `protobuf:"varint,4,opt,name=rid,proto3" json:"rid,omitempty"`                                                     //  主试id
	Ctime      int32    `protobuf:"varint,5,opt,name=ctime,proto3" json:"ctime,omitempty"`                                                 //  实验时间/min
	Pnum       int32    `protobuf:"varint,6,opt,name=pnum,proto3" json:"pnum,omitempty"`                                                   //  实验所需人数
	State      ExpState `protobuf:"varint,7,opt,name=state,proto3,enum=grpc.bravo_studio.exp_info_server.ExpState" json:"state,omitempty"` //  状态
	CreateTime string   `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                      //  发布时间
	UpdateTime string   `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                      //  更新时间
	CurType    int32    `protobuf:"varint,10,opt,name=cur_type,json=curType,proto3" json:"cur_type,omitempty"`                             //  币种代码
	Price      int64    `protobuf:"varint,11,opt,name=price,proto3" json:"price,omitempty"`                                                //  实验费用
	Url        string   `protobuf:"bytes,12,opt,name=url,proto3" json:"url,omitempty"`                                                     //  实验url
	Tags       []string `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
	Deadline   string   `protobuf:"bytes,14,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *ExpInfo) Reset() {
	*x = ExpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpInfo) ProtoMessage() {}

func (x *ExpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpInfo.ProtoReflect.Descriptor instead.
func (*ExpInfo) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{1}
}

func (x *ExpInfo) GetEid() int64 {
	if x != nil {
		return x.Eid
	}
	return 0
}

func (x *ExpInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExpInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ExpInfo) GetRid() int64 {
	if x != nil {
		return x.Rid
	}
	return 0
}

func (x *ExpInfo) GetCtime() int32 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *ExpInfo) GetPnum() int32 {
	if x != nil {
		return x.Pnum
	}
	return 0
}

func (x *ExpInfo) GetState() ExpState {
	if x != nil {
		return x.State
	}
	return ExpState_Invalid
}

func (x *ExpInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ExpInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ExpInfo) GetCurType() int32 {
	if x != nil {
		return x.CurType
	}
	return 0
}

func (x *ExpInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ExpInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ExpInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ExpInfo) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

type AddExpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Desc     string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Rid      int64    `protobuf:"varint,3,opt,name=rid,proto3" json:"rid,omitempty"`
	Ctime    int32    `protobuf:"varint,4,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Price    int64    `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	CurType  int32    `protobuf:"varint,7,opt,name=cur_type,json=curType,proto3" json:"cur_type,omitempty"`
	Url      string   `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	Pnum     int32    `protobuf:"varint,9,opt,name=pnum,proto3" json:"pnum,omitempty"`
	Tags     []string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	Deadline string   `protobuf:"bytes,11,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *AddExpReq) Reset() {
	*x = AddExpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExpReq) ProtoMessage() {}

func (x *AddExpReq) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExpReq.ProtoReflect.Descriptor instead.
func (*AddExpReq) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{2}
}

func (x *AddExpReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AddExpReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *AddExpReq) GetRid() int64 {
	if x != nil {
		return x.Rid
	}
	return 0
}

func (x *AddExpReq) GetCtime() int32 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *AddExpReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AddExpReq) GetCurType() int32 {
	if x != nil {
		return x.CurType
	}
	return 0
}

func (x *AddExpReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddExpReq) GetPnum() int32 {
	if x != nil {
		return x.Pnum
	}
	return 0
}

func (x *AddExpReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AddExpReq) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

type AddExpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Eid  int64  `protobuf:"varint,3,opt,name=eid,proto3" json:"eid,omitempty"`
}

func (x *AddExpRsp) Reset() {
	*x = AddExpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddExpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExpRsp) ProtoMessage() {}

func (x *AddExpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExpRsp.ProtoReflect.Descriptor instead.
func (*AddExpRsp) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{3}
}

func (x *AddExpRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddExpRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AddExpRsp) GetEid() int64 {
	if x != nil {
		return x.Eid
	}
	return 0
}

type UpdateExpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rid      int64    `protobuf:"varint,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Eid      int64    `protobuf:"varint,2,opt,name=eid,proto3" json:"eid,omitempty"`                                                     //  实验id
	Title    string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                                  //  实验标题
	Desc     string   `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`                                                    //  实验描述
	Ctime    int32    `protobuf:"varint,5,opt,name=ctime,proto3" json:"ctime,omitempty"`                                                 //  实验时间/min
	Pnum     int32    `protobuf:"varint,6,opt,name=pnum,proto3" json:"pnum,omitempty"`                                                   //  实验所需人数
	State    ExpState `protobuf:"varint,7,opt,name=state,proto3,enum=grpc.bravo_studio.exp_info_server.ExpState" json:"state,omitempty"` //  状态  1-草稿箱 2-已发布 3-已完成 4-已删除
	Price    int64    `protobuf:"varint,8,opt,name=price,proto3" json:"price,omitempty"`
	Deadline string   `protobuf:"bytes,9,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Tags     []string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	Url      string   `protobuf:"bytes,11,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *UpdateExpReq) Reset() {
	*x = UpdateExpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExpReq) ProtoMessage() {}

func (x *UpdateExpReq) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExpReq.ProtoReflect.Descriptor instead.
func (*UpdateExpReq) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateExpReq) GetRid() int64 {
	if x != nil {
		return x.Rid
	}
	return 0
}

func (x *UpdateExpReq) GetEid() int64 {
	if x != nil {
		return x.Eid
	}
	return 0
}

func (x *UpdateExpReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateExpReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *UpdateExpReq) GetCtime() int32 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *UpdateExpReq) GetPnum() int32 {
	if x != nil {
		return x.Pnum
	}
	return 0
}

func (x *UpdateExpReq) GetState() ExpState {
	if x != nil {
		return x.State
	}
	return ExpState_Invalid
}

func (x *UpdateExpReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdateExpReq) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *UpdateExpReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateExpReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type UpdateExpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Eid  int64  `protobuf:"varint,3,opt,name=eid,proto3" json:"eid,omitempty"`
}

func (x *UpdateExpRsp) Reset() {
	*x = UpdateExpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExpRsp) ProtoMessage() {}

func (x *UpdateExpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExpRsp.ProtoReflect.Descriptor instead.
func (*UpdateExpRsp) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateExpRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateExpRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UpdateExpRsp) GetEid() int64 {
	if x != nil {
		return x.Eid
	}
	return 0
}

type QueryExpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eid int64 `protobuf:"varint,1,opt,name=eid,proto3" json:"eid,omitempty"` // 实验id
	Rid int64 `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
}

func (x *QueryExpReq) Reset() {
	*x = QueryExpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExpReq) ProtoMessage() {}

func (x *QueryExpReq) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExpReq.ProtoReflect.Descriptor instead.
func (*QueryExpReq) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{6}
}

func (x *QueryExpReq) GetEid() int64 {
	if x != nil {
		return x.Eid
	}
	return 0
}

func (x *QueryExpReq) GetRid() int64 {
	if x != nil {
		return x.Rid
	}
	return 0
}

type QueryExpRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg         string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Exp         *ExpInfo   `protobuf:"bytes,3,opt,name=exp,proto3" json:"exp,omitempty"`
	Subs        []*SubInfo `protobuf:"bytes,4,rep,name=subs,proto3" json:"subs,omitempty"`
	SubsNum     int32      `protobuf:"varint,5,opt,name=subs_num,json=subsNum,proto3" json:"subs_num,omitempty"`
	FinishedNum int32      `protobuf:"varint,6,opt,name=finished_num,json=finishedNum,proto3" json:"finished_num,omitempty"`
}

func (x *QueryExpRsp) Reset() {
	*x = QueryExpRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExpRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExpRsp) ProtoMessage() {}

func (x *QueryExpRsp) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExpRsp.ProtoReflect.Descriptor instead.
func (*QueryExpRsp) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{7}
}

func (x *QueryExpRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryExpRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryExpRsp) GetExp() *ExpInfo {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *QueryExpRsp) GetSubs() []*SubInfo {
	if x != nil {
		return x.Subs
	}
	return nil
}

func (x *QueryExpRsp) GetSubsNum() int32 {
	if x != nil {
		return x.SubsNum
	}
	return 0
}

func (x *QueryExpRsp) GetFinishedNum() int32 {
	if x != nil {
		return x.FinishedNum
	}
	return 0
}

type QueryExpsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rid           int64    `protobuf:"varint,1,opt,name=rid,proto3" json:"rid,omitempty"` // 主试id
	PageIndex     int32    `protobuf:"varint,2,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize      int32    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	State         ExpState `protobuf:"varint,4,opt,name=state,proto3,enum=grpc.bravo_studio.exp_info_server.ExpState" json:"state,omitempty"`
	OrderType     int32    `protobuf:"varint,5,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	OnlySeeMyself int32    `protobuf:"varint,6,opt,name=only_see_myself,json=onlySeeMyself,proto3" json:"only_see_myself,omitempty"`
}

func (x *QueryExpsReq) Reset() {
	*x = QueryExpsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExpsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExpsReq) ProtoMessage() {}

func (x *QueryExpsReq) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExpsReq.ProtoReflect.Descriptor instead.
func (*QueryExpsReq) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{8}
}

func (x *QueryExpsReq) GetRid() int64 {
	if x != nil {
		return x.Rid
	}
	return 0
}

func (x *QueryExpsReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *QueryExpsReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryExpsReq) GetState() ExpState {
	if x != nil {
		return x.State
	}
	return ExpState_Invalid
}

func (x *QueryExpsReq) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *QueryExpsReq) GetOnlySeeMyself() int32 {
	if x != nil {
		return x.OnlySeeMyself
	}
	return 0
}

type ExpStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllNum      int32 `protobuf:"varint,1,opt,name=all_num,json=allNum,proto3" json:"all_num,omitempty"`
	OngoingNum  int32 `protobuf:"varint,2,opt,name=ongoing_num,json=ongoingNum,proto3" json:"ongoing_num,omitempty"`
	FinishedNum int32 `protobuf:"varint,3,opt,name=finished_num,json=finishedNum,proto3" json:"finished_num,omitempty"`
	ClosedNum   int32 `protobuf:"varint,4,opt,name=closed_num,json=closedNum,proto3" json:"closed_num,omitempty"`
}

func (x *ExpStats) Reset() {
	*x = ExpStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpStats) ProtoMessage() {}

func (x *ExpStats) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpStats.ProtoReflect.Descriptor instead.
func (*ExpStats) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{9}
}

func (x *ExpStats) GetAllNum() int32 {
	if x != nil {
		return x.AllNum
	}
	return 0
}

func (x *ExpStats) GetOngoingNum() int32 {
	if x != nil {
		return x.OngoingNum
	}
	return 0
}

func (x *ExpStats) GetFinishedNum() int32 {
	if x != nil {
		return x.FinishedNum
	}
	return 0
}

func (x *ExpStats) GetClosedNum() int32 {
	if x != nil {
		return x.ClosedNum
	}
	return 0
}

type QueryExpsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	TotalNum int32      `protobuf:"varint,3,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
	Exps     []*ExpInfo `protobuf:"bytes,4,rep,name=exps,proto3" json:"exps,omitempty"`
	Stats    *ExpStats  `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *QueryExpsRsp) Reset() {
	*x = QueryExpsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExpsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExpsRsp) ProtoMessage() {}

func (x *QueryExpsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExpsRsp.ProtoReflect.Descriptor instead.
func (*QueryExpsRsp) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{10}
}

func (x *QueryExpsRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryExpsRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QueryExpsRsp) GetTotalNum() int32 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

func (x *QueryExpsRsp) GetExps() []*ExpInfo {
	if x != nil {
		return x.Exps
	}
	return nil
}

func (x *QueryExpsRsp) GetStats() *ExpStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type AddSubReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eid int64 `protobuf:"varint,2,opt,name=eid,proto3" json:"eid,omitempty"`
	Pid int64 `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"` // 被实id
}

func (x *AddSubReq) Reset() {
	*x = AddSubReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubReq) ProtoMessage() {}

func (x *AddSubReq) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubReq.ProtoReflect.Descriptor instead.
func (*AddSubReq) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{11}
}

func (x *AddSubReq) GetEid() int64 {
	if x != nil {
		return x.Eid
	}
	return 0
}

func (x *AddSubReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type AddSubRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Sid  string `protobuf:"bytes,3,opt,name=sid,proto3" json:"sid,omitempty"` // 被试记录id
}

func (x *AddSubRsp) Reset() {
	*x = AddSubRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubRsp) ProtoMessage() {}

func (x *AddSubRsp) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubRsp.ProtoReflect.Descriptor instead.
func (*AddSubRsp) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{12}
}

func (x *AddSubRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddSubRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AddSubRsp) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type UpdateSubReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid     string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`  // 被试id
	Uid     int64    `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"` // 用户id
	State   SubState `protobuf:"varint,4,opt,name=state,proto3,enum=grpc.bravo_studio.exp_info_server.SubState" json:"state,omitempty"`
	EndTime int64    `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *UpdateSubReq) Reset() {
	*x = UpdateSubReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubReq) ProtoMessage() {}

func (x *UpdateSubReq) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubReq.ProtoReflect.Descriptor instead.
func (*UpdateSubReq) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateSubReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *UpdateSubReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UpdateSubReq) GetState() SubState {
	if x != nil {
		return x.State
	}
	return SubState_SubInvalid
}

func (x *UpdateSubReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type UpdateSubRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Sid  string `protobuf:"bytes,3,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *UpdateSubRsp) Reset() {
	*x = UpdateSubRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubRsp) ProtoMessage() {}

func (x *UpdateSubRsp) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubRsp.ProtoReflect.Descriptor instead.
func (*UpdateSubRsp) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateSubRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateSubRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UpdateSubRsp) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type QuerySubsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid       int64    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	PageIndex int32    `protobuf:"varint,2,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize  int32    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	State     SubState `protobuf:"varint,4,opt,name=state,proto3,enum=grpc.bravo_studio.exp_info_server.SubState" json:"state,omitempty"`
}

func (x *QuerySubsReq) Reset() {
	*x = QuerySubsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubsReq) ProtoMessage() {}

func (x *QuerySubsReq) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubsReq.ProtoReflect.Descriptor instead.
func (*QuerySubsReq) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{15}
}

func (x *QuerySubsReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *QuerySubsReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *QuerySubsReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QuerySubsReq) GetState() SubState {
	if x != nil {
		return x.State
	}
	return SubState_SubInvalid
}

type QuerySubsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Subs     []*SubInfo `protobuf:"bytes,3,rep,name=subs,proto3" json:"subs,omitempty"`
	TotalNum int32      `protobuf:"varint,4,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
}

func (x *QuerySubsRsp) Reset() {
	*x = QuerySubsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubsRsp) ProtoMessage() {}

func (x *QuerySubsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubsRsp.ProtoReflect.Descriptor instead.
func (*QuerySubsRsp) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{16}
}

func (x *QuerySubsRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QuerySubsRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QuerySubsRsp) GetSubs() []*SubInfo {
	if x != nil {
		return x.Subs
	}
	return nil
}

func (x *QuerySubsRsp) GetTotalNum() int32 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

type QuerySubReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eid int64  `protobuf:"varint,1,opt,name=eid,proto3" json:"eid,omitempty"`
	Sid string `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	Pid int64  `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *QuerySubReq) Reset() {
	*x = QuerySubReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubReq) ProtoMessage() {}

func (x *QuerySubReq) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubReq.ProtoReflect.Descriptor instead.
func (*QuerySubReq) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{17}
}

func (x *QuerySubReq) GetEid() int64 {
	if x != nil {
		return x.Eid
	}
	return 0
}

func (x *QuerySubReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *QuerySubReq) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type QuerySubRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Sub  *ExpInfo `protobuf:"bytes,3,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (x *QuerySubRsp) Reset() {
	*x = QuerySubRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exp_info_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubRsp) ProtoMessage() {}

func (x *QuerySubRsp) ProtoReflect() protoreflect.Message {
	mi := &file_exp_info_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubRsp.ProtoReflect.Descriptor instead.
func (*QuerySubRsp) Descriptor() ([]byte, []int) {
	return file_exp_info_proto_rawDescGZIP(), []int{18}
}

func (x *QuerySubRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QuerySubRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *QuerySubRsp) GetSub() *ExpInfo {
	if x != nil {
		return x.Sub
	}
	return nil
}

var File_exp_info_proto protoreflect.FileDescriptor

var file_exp_info_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x21, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0xe5, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x65, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61,
	0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf9, 0x02, 0x0a, 0x07,
	0x45, 0x78, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6e, 0x75, 0x6d, 0x12,
	0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x45,
	0x78, 0x70, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6e,
	0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6e, 0x75, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x43,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x65, 0x69, 0x64, 0x22, 0xa1, 0x02, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6e, 0x75, 0x6d, 0x12, 0x41, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x45, 0x78, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x46, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x69, 0x64, 0x22,
	0x31, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72,
	0x69, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x52,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61,
	0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x75, 0x62, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76,
	0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x73, 0x75, 0x62, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x73, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x73, 0x4e, 0x75,
	0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x65,
	0x65, 0x5f, 0x6d, 0x79, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x65, 0x4d, 0x79, 0x73, 0x65, 0x6c, 0x66, 0x22, 0x86, 0x01,
	0x0a, 0x08, 0x45, 0x78, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x6c,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6c, 0x6c,
	0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x45, 0x78, 0x70, 0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x04, 0x65, 0x78,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x65, 0x78, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x2f, 0x0a,
	0x09, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x43,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62,
	0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x9f,
	0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x91, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x75, 0x62, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61,
	0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x73, 0x75, 0x62, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x43, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x65, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x0b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x75, 0x62, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3c,
	0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x45, 0x78, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x73, 0x75, 0x62, 0x2a, 0x40, 0x0a, 0x08,
	0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x58,
	0x0a, 0x08, 0x45, 0x78, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x05, 0x32, 0xef, 0x06, 0x0a, 0x0d, 0x45, 0x78, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x06, 0x41, 0x64,
	0x64, 0x45, 0x78, 0x70, 0x12, 0x2c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76,
	0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x52, 0x73, 0x70,
	0x12, 0x6d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x12, 0x2f, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x2f,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x52, 0x73, 0x70, 0x12,
	0x6a, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x12, 0x2e, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x52, 0x73, 0x70, 0x12, 0x6d, 0x0a, 0x09, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x73, 0x12, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x78, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x73, 0x52, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x06, 0x41, 0x64,
	0x64, 0x53, 0x75, 0x62, 0x12, 0x2c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76,
	0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x52,
	0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x52, 0x73, 0x70,
	0x12, 0x6d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x12, 0x2f, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x2f,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x52, 0x73, 0x70, 0x12,
	0x6d, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x12, 0x2f, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x52, 0x73, 0x70, 0x12, 0x6a,
	0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x12, 0x2e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65,
	0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x62, 0x72, 0x61, 0x76, 0x6f, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x65,
	0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x52, 0x73, 0x70, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x72, 0x61, 0x76, 0x6f, 0x4c, 0x75,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_exp_info_proto_rawDescOnce sync.Once
	file_exp_info_proto_rawDescData = file_exp_info_proto_rawDesc
)

func file_exp_info_proto_rawDescGZIP() []byte {
	file_exp_info_proto_rawDescOnce.Do(func() {
		file_exp_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_exp_info_proto_rawDescData)
	})
	return file_exp_info_proto_rawDescData
}

var file_exp_info_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_exp_info_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_exp_info_proto_goTypes = []interface{}{
	(SubState)(0),        // 0: grpc.bravo_studio.exp_info_server.SubState
	(ExpState)(0),        // 1: grpc.bravo_studio.exp_info_server.ExpState
	(*SubInfo)(nil),      // 2: grpc.bravo_studio.exp_info_server.SubInfo
	(*ExpInfo)(nil),      // 3: grpc.bravo_studio.exp_info_server.ExpInfo
	(*AddExpReq)(nil),    // 4: grpc.bravo_studio.exp_info_server.AddExpReq
	(*AddExpRsp)(nil),    // 5: grpc.bravo_studio.exp_info_server.AddExpRsp
	(*UpdateExpReq)(nil), // 6: grpc.bravo_studio.exp_info_server.UpdateExpReq
	(*UpdateExpRsp)(nil), // 7: grpc.bravo_studio.exp_info_server.UpdateExpRsp
	(*QueryExpReq)(nil),  // 8: grpc.bravo_studio.exp_info_server.QueryExpReq
	(*QueryExpRsp)(nil),  // 9: grpc.bravo_studio.exp_info_server.QueryExpRsp
	(*QueryExpsReq)(nil), // 10: grpc.bravo_studio.exp_info_server.QueryExpsReq
	(*ExpStats)(nil),     // 11: grpc.bravo_studio.exp_info_server.ExpStats
	(*QueryExpsRsp)(nil), // 12: grpc.bravo_studio.exp_info_server.QueryExpsRsp
	(*AddSubReq)(nil),    // 13: grpc.bravo_studio.exp_info_server.AddSubReq
	(*AddSubRsp)(nil),    // 14: grpc.bravo_studio.exp_info_server.AddSubRsp
	(*UpdateSubReq)(nil), // 15: grpc.bravo_studio.exp_info_server.UpdateSubReq
	(*UpdateSubRsp)(nil), // 16: grpc.bravo_studio.exp_info_server.UpdateSubRsp
	(*QuerySubsReq)(nil), // 17: grpc.bravo_studio.exp_info_server.QuerySubsReq
	(*QuerySubsRsp)(nil), // 18: grpc.bravo_studio.exp_info_server.QuerySubsRsp
	(*QuerySubReq)(nil),  // 19: grpc.bravo_studio.exp_info_server.QuerySubReq
	(*QuerySubRsp)(nil),  // 20: grpc.bravo_studio.exp_info_server.QuerySubRsp
}
var file_exp_info_proto_depIdxs = []int32{
	0,  // 0: grpc.bravo_studio.exp_info_server.SubInfo.state:type_name -> grpc.bravo_studio.exp_info_server.SubState
	1,  // 1: grpc.bravo_studio.exp_info_server.ExpInfo.state:type_name -> grpc.bravo_studio.exp_info_server.ExpState
	1,  // 2: grpc.bravo_studio.exp_info_server.UpdateExpReq.state:type_name -> grpc.bravo_studio.exp_info_server.ExpState
	3,  // 3: grpc.bravo_studio.exp_info_server.QueryExpRsp.exp:type_name -> grpc.bravo_studio.exp_info_server.ExpInfo
	2,  // 4: grpc.bravo_studio.exp_info_server.QueryExpRsp.subs:type_name -> grpc.bravo_studio.exp_info_server.SubInfo
	1,  // 5: grpc.bravo_studio.exp_info_server.QueryExpsReq.state:type_name -> grpc.bravo_studio.exp_info_server.ExpState
	3,  // 6: grpc.bravo_studio.exp_info_server.QueryExpsRsp.exps:type_name -> grpc.bravo_studio.exp_info_server.ExpInfo
	11, // 7: grpc.bravo_studio.exp_info_server.QueryExpsRsp.stats:type_name -> grpc.bravo_studio.exp_info_server.ExpStats
	0,  // 8: grpc.bravo_studio.exp_info_server.UpdateSubReq.state:type_name -> grpc.bravo_studio.exp_info_server.SubState
	0,  // 9: grpc.bravo_studio.exp_info_server.QuerySubsReq.state:type_name -> grpc.bravo_studio.exp_info_server.SubState
	2,  // 10: grpc.bravo_studio.exp_info_server.QuerySubsRsp.subs:type_name -> grpc.bravo_studio.exp_info_server.SubInfo
	3,  // 11: grpc.bravo_studio.exp_info_server.QuerySubRsp.sub:type_name -> grpc.bravo_studio.exp_info_server.ExpInfo
	4,  // 12: grpc.bravo_studio.exp_info_server.ExpInfoServer.AddExp:input_type -> grpc.bravo_studio.exp_info_server.AddExpReq
	6,  // 13: grpc.bravo_studio.exp_info_server.ExpInfoServer.UpdateExp:input_type -> grpc.bravo_studio.exp_info_server.UpdateExpReq
	8,  // 14: grpc.bravo_studio.exp_info_server.ExpInfoServer.QueryExp:input_type -> grpc.bravo_studio.exp_info_server.QueryExpReq
	10, // 15: grpc.bravo_studio.exp_info_server.ExpInfoServer.QueryExps:input_type -> grpc.bravo_studio.exp_info_server.QueryExpsReq
	13, // 16: grpc.bravo_studio.exp_info_server.ExpInfoServer.AddSub:input_type -> grpc.bravo_studio.exp_info_server.AddSubReq
	15, // 17: grpc.bravo_studio.exp_info_server.ExpInfoServer.UpdateSub:input_type -> grpc.bravo_studio.exp_info_server.UpdateSubReq
	17, // 18: grpc.bravo_studio.exp_info_server.ExpInfoServer.QuerySubs:input_type -> grpc.bravo_studio.exp_info_server.QuerySubsReq
	19, // 19: grpc.bravo_studio.exp_info_server.ExpInfoServer.QuerySub:input_type -> grpc.bravo_studio.exp_info_server.QuerySubReq
	5,  // 20: grpc.bravo_studio.exp_info_server.ExpInfoServer.AddExp:output_type -> grpc.bravo_studio.exp_info_server.AddExpRsp
	7,  // 21: grpc.bravo_studio.exp_info_server.ExpInfoServer.UpdateExp:output_type -> grpc.bravo_studio.exp_info_server.UpdateExpRsp
	9,  // 22: grpc.bravo_studio.exp_info_server.ExpInfoServer.QueryExp:output_type -> grpc.bravo_studio.exp_info_server.QueryExpRsp
	12, // 23: grpc.bravo_studio.exp_info_server.ExpInfoServer.QueryExps:output_type -> grpc.bravo_studio.exp_info_server.QueryExpsRsp
	14, // 24: grpc.bravo_studio.exp_info_server.ExpInfoServer.AddSub:output_type -> grpc.bravo_studio.exp_info_server.AddSubRsp
	16, // 25: grpc.bravo_studio.exp_info_server.ExpInfoServer.UpdateSub:output_type -> grpc.bravo_studio.exp_info_server.UpdateSubRsp
	18, // 26: grpc.bravo_studio.exp_info_server.ExpInfoServer.QuerySubs:output_type -> grpc.bravo_studio.exp_info_server.QuerySubsRsp
	20, // 27: grpc.bravo_studio.exp_info_server.ExpInfoServer.QuerySub:output_type -> grpc.bravo_studio.exp_info_server.QuerySubRsp
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_exp_info_proto_init() }
func file_exp_info_proto_init() {
	if File_exp_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_exp_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddExpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExpRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExpsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExpsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_exp_info_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exp_info_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_exp_info_proto_goTypes,
		DependencyIndexes: file_exp_info_proto_depIdxs,
		EnumInfos:         file_exp_info_proto_enumTypes,
		MessageInfos:      file_exp_info_proto_msgTypes,
	}.Build()
	File_exp_info_proto = out.File
	file_exp_info_proto_rawDesc = nil
	file_exp_info_proto_goTypes = nil
	file_exp_info_proto_depIdxs = nil
}
