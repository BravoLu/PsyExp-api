// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: exp_info.proto

package grpc_exp_info

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExpInfoServerClient is the client API for ExpInfoServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpInfoServerClient interface {
	// 主试
	AddExp(ctx context.Context, in *AddExpReq, opts ...grpc.CallOption) (*AddExpRsp, error)
	UpdateExp(ctx context.Context, in *UpdateExpReq, opts ...grpc.CallOption) (*UpdateExpRsp, error)
	QueryExp(ctx context.Context, in *QueryExpReq, opts ...grpc.CallOption) (*QueryExpRsp, error)
	QueryExps(ctx context.Context, in *QueryExpsReq, opts ...grpc.CallOption) (*QueryExpsRsp, error)
	// 被试记录
	AddSub(ctx context.Context, in *AddSubReq, opts ...grpc.CallOption) (*AddSubRsp, error)
	UpdateSub(ctx context.Context, in *UpdateSubReq, opts ...grpc.CallOption) (*UpdateSubRsp, error)
	// rpc QuerySub (QuerySubReq) returns (QuerySubRsp);                //  查询被试记录
	QuerySubs(ctx context.Context, in *QuerySubsReq, opts ...grpc.CallOption) (*QuerySubsRsp, error)
	QuerySub(ctx context.Context, in *QuerySubReq, opts ...grpc.CallOption) (*QuerySubRsp, error)
}

type expInfoServerClient struct {
	cc grpc.ClientConnInterface
}

func NewExpInfoServerClient(cc grpc.ClientConnInterface) ExpInfoServerClient {
	return &expInfoServerClient{cc}
}

func (c *expInfoServerClient) AddExp(ctx context.Context, in *AddExpReq, opts ...grpc.CallOption) (*AddExpRsp, error) {
	out := new(AddExpRsp)
	err := c.cc.Invoke(ctx, "/grpc.bravo_studio.exp_info_server.ExpInfoServer/AddExp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expInfoServerClient) UpdateExp(ctx context.Context, in *UpdateExpReq, opts ...grpc.CallOption) (*UpdateExpRsp, error) {
	out := new(UpdateExpRsp)
	err := c.cc.Invoke(ctx, "/grpc.bravo_studio.exp_info_server.ExpInfoServer/UpdateExp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expInfoServerClient) QueryExp(ctx context.Context, in *QueryExpReq, opts ...grpc.CallOption) (*QueryExpRsp, error) {
	out := new(QueryExpRsp)
	err := c.cc.Invoke(ctx, "/grpc.bravo_studio.exp_info_server.ExpInfoServer/QueryExp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expInfoServerClient) QueryExps(ctx context.Context, in *QueryExpsReq, opts ...grpc.CallOption) (*QueryExpsRsp, error) {
	out := new(QueryExpsRsp)
	err := c.cc.Invoke(ctx, "/grpc.bravo_studio.exp_info_server.ExpInfoServer/QueryExps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expInfoServerClient) AddSub(ctx context.Context, in *AddSubReq, opts ...grpc.CallOption) (*AddSubRsp, error) {
	out := new(AddSubRsp)
	err := c.cc.Invoke(ctx, "/grpc.bravo_studio.exp_info_server.ExpInfoServer/AddSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expInfoServerClient) UpdateSub(ctx context.Context, in *UpdateSubReq, opts ...grpc.CallOption) (*UpdateSubRsp, error) {
	out := new(UpdateSubRsp)
	err := c.cc.Invoke(ctx, "/grpc.bravo_studio.exp_info_server.ExpInfoServer/UpdateSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expInfoServerClient) QuerySubs(ctx context.Context, in *QuerySubsReq, opts ...grpc.CallOption) (*QuerySubsRsp, error) {
	out := new(QuerySubsRsp)
	err := c.cc.Invoke(ctx, "/grpc.bravo_studio.exp_info_server.ExpInfoServer/QuerySubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expInfoServerClient) QuerySub(ctx context.Context, in *QuerySubReq, opts ...grpc.CallOption) (*QuerySubRsp, error) {
	out := new(QuerySubRsp)
	err := c.cc.Invoke(ctx, "/grpc.bravo_studio.exp_info_server.ExpInfoServer/QuerySub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpInfoServerServer is the server API for ExpInfoServer service.
// All implementations must embed UnimplementedExpInfoServerServer
// for forward compatibility
type ExpInfoServerServer interface {
	// 主试
	AddExp(context.Context, *AddExpReq) (*AddExpRsp, error)
	UpdateExp(context.Context, *UpdateExpReq) (*UpdateExpRsp, error)
	QueryExp(context.Context, *QueryExpReq) (*QueryExpRsp, error)
	QueryExps(context.Context, *QueryExpsReq) (*QueryExpsRsp, error)
	// 被试记录
	AddSub(context.Context, *AddSubReq) (*AddSubRsp, error)
	UpdateSub(context.Context, *UpdateSubReq) (*UpdateSubRsp, error)
	// rpc QuerySub (QuerySubReq) returns (QuerySubRsp);                //  查询被试记录
	QuerySubs(context.Context, *QuerySubsReq) (*QuerySubsRsp, error)
	QuerySub(context.Context, *QuerySubReq) (*QuerySubRsp, error)
	mustEmbedUnimplementedExpInfoServerServer()
}

// UnimplementedExpInfoServerServer must be embedded to have forward compatible implementations.
type UnimplementedExpInfoServerServer struct {
}

func (UnimplementedExpInfoServerServer) AddExp(context.Context, *AddExpReq) (*AddExpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExp not implemented")
}
func (UnimplementedExpInfoServerServer) UpdateExp(context.Context, *UpdateExpReq) (*UpdateExpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExp not implemented")
}
func (UnimplementedExpInfoServerServer) QueryExp(context.Context, *QueryExpReq) (*QueryExpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExp not implemented")
}
func (UnimplementedExpInfoServerServer) QueryExps(context.Context, *QueryExpsReq) (*QueryExpsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExps not implemented")
}
func (UnimplementedExpInfoServerServer) AddSub(context.Context, *AddSubReq) (*AddSubRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSub not implemented")
}
func (UnimplementedExpInfoServerServer) UpdateSub(context.Context, *UpdateSubReq) (*UpdateSubRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSub not implemented")
}
func (UnimplementedExpInfoServerServer) QuerySubs(context.Context, *QuerySubsReq) (*QuerySubsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySubs not implemented")
}
func (UnimplementedExpInfoServerServer) QuerySub(context.Context, *QuerySubReq) (*QuerySubRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySub not implemented")
}
func (UnimplementedExpInfoServerServer) mustEmbedUnimplementedExpInfoServerServer() {}

// UnsafeExpInfoServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpInfoServerServer will
// result in compilation errors.
type UnsafeExpInfoServerServer interface {
	mustEmbedUnimplementedExpInfoServerServer()
}

func RegisterExpInfoServerServer(s grpc.ServiceRegistrar, srv ExpInfoServerServer) {
	s.RegisterService(&ExpInfoServer_ServiceDesc, srv)
}

func _ExpInfoServer_AddExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpInfoServerServer).AddExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.bravo_studio.exp_info_server.ExpInfoServer/AddExp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpInfoServerServer).AddExp(ctx, req.(*AddExpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpInfoServer_UpdateExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpInfoServerServer).UpdateExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.bravo_studio.exp_info_server.ExpInfoServer/UpdateExp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpInfoServerServer).UpdateExp(ctx, req.(*UpdateExpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpInfoServer_QueryExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpInfoServerServer).QueryExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.bravo_studio.exp_info_server.ExpInfoServer/QueryExp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpInfoServerServer).QueryExp(ctx, req.(*QueryExpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpInfoServer_QueryExps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExpsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpInfoServerServer).QueryExps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.bravo_studio.exp_info_server.ExpInfoServer/QueryExps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpInfoServerServer).QueryExps(ctx, req.(*QueryExpsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpInfoServer_AddSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpInfoServerServer).AddSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.bravo_studio.exp_info_server.ExpInfoServer/AddSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpInfoServerServer).AddSub(ctx, req.(*AddSubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpInfoServer_UpdateSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpInfoServerServer).UpdateSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.bravo_studio.exp_info_server.ExpInfoServer/UpdateSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpInfoServerServer).UpdateSub(ctx, req.(*UpdateSubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpInfoServer_QuerySubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpInfoServerServer).QuerySubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.bravo_studio.exp_info_server.ExpInfoServer/QuerySubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpInfoServerServer).QuerySubs(ctx, req.(*QuerySubsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpInfoServer_QuerySub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpInfoServerServer).QuerySub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.bravo_studio.exp_info_server.ExpInfoServer/QuerySub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpInfoServerServer).QuerySub(ctx, req.(*QuerySubReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpInfoServer_ServiceDesc is the grpc.ServiceDesc for ExpInfoServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpInfoServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.bravo_studio.exp_info_server.ExpInfoServer",
	HandlerType: (*ExpInfoServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddExp",
			Handler:    _ExpInfoServer_AddExp_Handler,
		},
		{
			MethodName: "UpdateExp",
			Handler:    _ExpInfoServer_UpdateExp_Handler,
		},
		{
			MethodName: "QueryExp",
			Handler:    _ExpInfoServer_QueryExp_Handler,
		},
		{
			MethodName: "QueryExps",
			Handler:    _ExpInfoServer_QueryExps_Handler,
		},
		{
			MethodName: "AddSub",
			Handler:    _ExpInfoServer_AddSub_Handler,
		},
		{
			MethodName: "UpdateSub",
			Handler:    _ExpInfoServer_UpdateSub_Handler,
		},
		{
			MethodName: "QuerySubs",
			Handler:    _ExpInfoServer_QuerySubs_Handler,
		},
		{
			MethodName: "QuerySub",
			Handler:    _ExpInfoServer_QuerySub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exp_info.proto",
}
