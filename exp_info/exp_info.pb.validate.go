// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: exp_info.proto

package grpc_exp_info

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SubInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SubInfoMultiError, or nil if none found.
func (m *SubInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SubInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sid

	// no validation rules for Eid

	// no validation rules for Pid

	// no validation rules for FinishedAt

	// no validation rules for State

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return SubInfoMultiError(errors)
	}

	return nil
}

// SubInfoMultiError is an error wrapping multiple validation errors returned
// by SubInfo.ValidateAll() if the designated constraints aren't met.
type SubInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubInfoMultiError) AllErrors() []error { return m }

// SubInfoValidationError is the validation error returned by SubInfo.Validate
// if the designated constraints aren't met.
type SubInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubInfoValidationError) ErrorName() string { return "SubInfoValidationError" }

// Error satisfies the builtin error interface
func (e SubInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubInfoValidationError{}

// Validate checks the field values on ExpInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExpInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ExpInfoMultiError, or nil if none found.
func (m *ExpInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Eid

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for Rid

	// no validation rules for Ctime

	// no validation rules for Pnum

	// no validation rules for State

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for CurType

	// no validation rules for Price

	// no validation rules for Url

	// no validation rules for Deadline

	if len(errors) > 0 {
		return ExpInfoMultiError(errors)
	}

	return nil
}

// ExpInfoMultiError is an error wrapping multiple validation errors returned
// by ExpInfo.ValidateAll() if the designated constraints aren't met.
type ExpInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpInfoMultiError) AllErrors() []error { return m }

// ExpInfoValidationError is the validation error returned by ExpInfo.Validate
// if the designated constraints aren't met.
type ExpInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpInfoValidationError) ErrorName() string { return "ExpInfoValidationError" }

// Error satisfies the builtin error interface
func (e ExpInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpInfoValidationError{}

// Validate checks the field values on AddExpReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddExpReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExpReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddExpReqMultiError, or nil
// if none found.
func (m *AddExpReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExpReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for Rid

	// no validation rules for Ctime

	// no validation rules for Price

	// no validation rules for CurType

	// no validation rules for Url

	// no validation rules for Pnum

	// no validation rules for Deadline

	if len(errors) > 0 {
		return AddExpReqMultiError(errors)
	}

	return nil
}

// AddExpReqMultiError is an error wrapping multiple validation errors returned
// by AddExpReq.ValidateAll() if the designated constraints aren't met.
type AddExpReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExpReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExpReqMultiError) AllErrors() []error { return m }

// AddExpReqValidationError is the validation error returned by
// AddExpReq.Validate if the designated constraints aren't met.
type AddExpReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExpReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExpReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExpReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExpReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExpReqValidationError) ErrorName() string { return "AddExpReqValidationError" }

// Error satisfies the builtin error interface
func (e AddExpReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExpReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExpReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExpReqValidationError{}

// Validate checks the field values on AddExpRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddExpRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExpRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddExpRspMultiError, or nil
// if none found.
func (m *AddExpRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExpRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Eid

	if len(errors) > 0 {
		return AddExpRspMultiError(errors)
	}

	return nil
}

// AddExpRspMultiError is an error wrapping multiple validation errors returned
// by AddExpRsp.ValidateAll() if the designated constraints aren't met.
type AddExpRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExpRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExpRspMultiError) AllErrors() []error { return m }

// AddExpRspValidationError is the validation error returned by
// AddExpRsp.Validate if the designated constraints aren't met.
type AddExpRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExpRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExpRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExpRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExpRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExpRspValidationError) ErrorName() string { return "AddExpRspValidationError" }

// Error satisfies the builtin error interface
func (e AddExpRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExpRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExpRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExpRspValidationError{}

// Validate checks the field values on UpdateExpReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateExpReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateExpReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateExpReqMultiError, or
// nil if none found.
func (m *UpdateExpReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExpReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rid

	// no validation rules for Eid

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for Ctime

	// no validation rules for Pnum

	// no validation rules for State

	// no validation rules for Price

	// no validation rules for Deadline

	// no validation rules for Url

	if len(errors) > 0 {
		return UpdateExpReqMultiError(errors)
	}

	return nil
}

// UpdateExpReqMultiError is an error wrapping multiple validation errors
// returned by UpdateExpReq.ValidateAll() if the designated constraints aren't met.
type UpdateExpReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExpReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExpReqMultiError) AllErrors() []error { return m }

// UpdateExpReqValidationError is the validation error returned by
// UpdateExpReq.Validate if the designated constraints aren't met.
type UpdateExpReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExpReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExpReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExpReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExpReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExpReqValidationError) ErrorName() string { return "UpdateExpReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateExpReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExpReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExpReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExpReqValidationError{}

// Validate checks the field values on UpdateExpRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateExpRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateExpRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateExpRspMultiError, or
// nil if none found.
func (m *UpdateExpRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExpRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Eid

	if len(errors) > 0 {
		return UpdateExpRspMultiError(errors)
	}

	return nil
}

// UpdateExpRspMultiError is an error wrapping multiple validation errors
// returned by UpdateExpRsp.ValidateAll() if the designated constraints aren't met.
type UpdateExpRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExpRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExpRspMultiError) AllErrors() []error { return m }

// UpdateExpRspValidationError is the validation error returned by
// UpdateExpRsp.Validate if the designated constraints aren't met.
type UpdateExpRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExpRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExpRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExpRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExpRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExpRspValidationError) ErrorName() string { return "UpdateExpRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateExpRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExpRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExpRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExpRspValidationError{}

// Validate checks the field values on QueryExpReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryExpReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExpReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryExpReqMultiError, or
// nil if none found.
func (m *QueryExpReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExpReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Eid

	// no validation rules for Rid

	if len(errors) > 0 {
		return QueryExpReqMultiError(errors)
	}

	return nil
}

// QueryExpReqMultiError is an error wrapping multiple validation errors
// returned by QueryExpReq.ValidateAll() if the designated constraints aren't met.
type QueryExpReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExpReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExpReqMultiError) AllErrors() []error { return m }

// QueryExpReqValidationError is the validation error returned by
// QueryExpReq.Validate if the designated constraints aren't met.
type QueryExpReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExpReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExpReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExpReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExpReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExpReqValidationError) ErrorName() string { return "QueryExpReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryExpReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExpReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExpReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExpReqValidationError{}

// Validate checks the field values on QueryExpRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryExpRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExpRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryExpRspMultiError, or
// nil if none found.
func (m *QueryExpRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExpRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetExp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryExpRspValidationError{
					field:  "Exp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryExpRspValidationError{
					field:  "Exp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryExpRspValidationError{
				field:  "Exp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSubs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryExpRspValidationError{
						field:  fmt.Sprintf("Subs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryExpRspValidationError{
						field:  fmt.Sprintf("Subs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryExpRspValidationError{
					field:  fmt.Sprintf("Subs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SubsNum

	// no validation rules for FinishedNum

	if len(errors) > 0 {
		return QueryExpRspMultiError(errors)
	}

	return nil
}

// QueryExpRspMultiError is an error wrapping multiple validation errors
// returned by QueryExpRsp.ValidateAll() if the designated constraints aren't met.
type QueryExpRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExpRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExpRspMultiError) AllErrors() []error { return m }

// QueryExpRspValidationError is the validation error returned by
// QueryExpRsp.Validate if the designated constraints aren't met.
type QueryExpRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExpRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExpRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExpRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExpRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExpRspValidationError) ErrorName() string { return "QueryExpRspValidationError" }

// Error satisfies the builtin error interface
func (e QueryExpRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExpRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExpRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExpRspValidationError{}

// Validate checks the field values on QueryExpsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryExpsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExpsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryExpsReqMultiError, or
// nil if none found.
func (m *QueryExpsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExpsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rid

	// no validation rules for PageIndex

	// no validation rules for PageSize

	// no validation rules for State

	// no validation rules for OrderType

	// no validation rules for OnlySeeMyself

	if len(errors) > 0 {
		return QueryExpsReqMultiError(errors)
	}

	return nil
}

// QueryExpsReqMultiError is an error wrapping multiple validation errors
// returned by QueryExpsReq.ValidateAll() if the designated constraints aren't met.
type QueryExpsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExpsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExpsReqMultiError) AllErrors() []error { return m }

// QueryExpsReqValidationError is the validation error returned by
// QueryExpsReq.Validate if the designated constraints aren't met.
type QueryExpsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExpsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExpsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExpsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExpsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExpsReqValidationError) ErrorName() string { return "QueryExpsReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryExpsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExpsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExpsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExpsReqValidationError{}

// Validate checks the field values on ExpStats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExpStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExpStats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpStatsMultiError, or nil
// if none found.
func (m *ExpStats) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllNum

	// no validation rules for OngoingNum

	// no validation rules for FinishedNum

	// no validation rules for ClosedNum

	if len(errors) > 0 {
		return ExpStatsMultiError(errors)
	}

	return nil
}

// ExpStatsMultiError is an error wrapping multiple validation errors returned
// by ExpStats.ValidateAll() if the designated constraints aren't met.
type ExpStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpStatsMultiError) AllErrors() []error { return m }

// ExpStatsValidationError is the validation error returned by
// ExpStats.Validate if the designated constraints aren't met.
type ExpStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpStatsValidationError) ErrorName() string { return "ExpStatsValidationError" }

// Error satisfies the builtin error interface
func (e ExpStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpStatsValidationError{}

// Validate checks the field values on QueryExpsRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryExpsRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryExpsRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryExpsRspMultiError, or
// nil if none found.
func (m *QueryExpsRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryExpsRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for TotalNum

	for idx, item := range m.GetExps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryExpsRspValidationError{
						field:  fmt.Sprintf("Exps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryExpsRspValidationError{
						field:  fmt.Sprintf("Exps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryExpsRspValidationError{
					field:  fmt.Sprintf("Exps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryExpsRspValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryExpsRspValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryExpsRspValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryExpsRspMultiError(errors)
	}

	return nil
}

// QueryExpsRspMultiError is an error wrapping multiple validation errors
// returned by QueryExpsRsp.ValidateAll() if the designated constraints aren't met.
type QueryExpsRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryExpsRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryExpsRspMultiError) AllErrors() []error { return m }

// QueryExpsRspValidationError is the validation error returned by
// QueryExpsRsp.Validate if the designated constraints aren't met.
type QueryExpsRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryExpsRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryExpsRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryExpsRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryExpsRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryExpsRspValidationError) ErrorName() string { return "QueryExpsRspValidationError" }

// Error satisfies the builtin error interface
func (e QueryExpsRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryExpsRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryExpsRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryExpsRspValidationError{}

// Validate checks the field values on AddSubReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddSubReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSubReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddSubReqMultiError, or nil
// if none found.
func (m *AddSubReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSubReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Eid

	// no validation rules for Pid

	if len(errors) > 0 {
		return AddSubReqMultiError(errors)
	}

	return nil
}

// AddSubReqMultiError is an error wrapping multiple validation errors returned
// by AddSubReq.ValidateAll() if the designated constraints aren't met.
type AddSubReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSubReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSubReqMultiError) AllErrors() []error { return m }

// AddSubReqValidationError is the validation error returned by
// AddSubReq.Validate if the designated constraints aren't met.
type AddSubReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSubReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSubReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSubReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSubReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSubReqValidationError) ErrorName() string { return "AddSubReqValidationError" }

// Error satisfies the builtin error interface
func (e AddSubReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSubReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSubReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSubReqValidationError{}

// Validate checks the field values on AddSubRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddSubRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSubRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddSubRspMultiError, or nil
// if none found.
func (m *AddSubRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSubRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Sid

	if len(errors) > 0 {
		return AddSubRspMultiError(errors)
	}

	return nil
}

// AddSubRspMultiError is an error wrapping multiple validation errors returned
// by AddSubRsp.ValidateAll() if the designated constraints aren't met.
type AddSubRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSubRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSubRspMultiError) AllErrors() []error { return m }

// AddSubRspValidationError is the validation error returned by
// AddSubRsp.Validate if the designated constraints aren't met.
type AddSubRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSubRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSubRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSubRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSubRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSubRspValidationError) ErrorName() string { return "AddSubRspValidationError" }

// Error satisfies the builtin error interface
func (e AddSubRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSubRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSubRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSubRspValidationError{}

// Validate checks the field values on UpdateSubReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateSubReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateSubReqMultiError, or
// nil if none found.
func (m *UpdateSubReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sid

	// no validation rules for Uid

	// no validation rules for State

	// no validation rules for EndTime

	if len(errors) > 0 {
		return UpdateSubReqMultiError(errors)
	}

	return nil
}

// UpdateSubReqMultiError is an error wrapping multiple validation errors
// returned by UpdateSubReq.ValidateAll() if the designated constraints aren't met.
type UpdateSubReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubReqMultiError) AllErrors() []error { return m }

// UpdateSubReqValidationError is the validation error returned by
// UpdateSubReq.Validate if the designated constraints aren't met.
type UpdateSubReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubReqValidationError) ErrorName() string { return "UpdateSubReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSubReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubReqValidationError{}

// Validate checks the field values on UpdateSubRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateSubRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateSubRspMultiError, or
// nil if none found.
func (m *UpdateSubRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Sid

	if len(errors) > 0 {
		return UpdateSubRspMultiError(errors)
	}

	return nil
}

// UpdateSubRspMultiError is an error wrapping multiple validation errors
// returned by UpdateSubRsp.ValidateAll() if the designated constraints aren't met.
type UpdateSubRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubRspMultiError) AllErrors() []error { return m }

// UpdateSubRspValidationError is the validation error returned by
// UpdateSubRsp.Validate if the designated constraints aren't met.
type UpdateSubRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubRspValidationError) ErrorName() string { return "UpdateSubRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSubRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubRspValidationError{}

// Validate checks the field values on QuerySubsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuerySubsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySubsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuerySubsReqMultiError, or
// nil if none found.
func (m *QuerySubsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySubsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pid

	// no validation rules for PageIndex

	// no validation rules for PageSize

	// no validation rules for State

	if len(errors) > 0 {
		return QuerySubsReqMultiError(errors)
	}

	return nil
}

// QuerySubsReqMultiError is an error wrapping multiple validation errors
// returned by QuerySubsReq.ValidateAll() if the designated constraints aren't met.
type QuerySubsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySubsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySubsReqMultiError) AllErrors() []error { return m }

// QuerySubsReqValidationError is the validation error returned by
// QuerySubsReq.Validate if the designated constraints aren't met.
type QuerySubsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySubsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySubsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySubsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySubsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySubsReqValidationError) ErrorName() string { return "QuerySubsReqValidationError" }

// Error satisfies the builtin error interface
func (e QuerySubsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySubsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySubsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySubsReqValidationError{}

// Validate checks the field values on QuerySubsRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuerySubsRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySubsRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuerySubsRspMultiError, or
// nil if none found.
func (m *QuerySubsRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySubsRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetSubs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuerySubsRspValidationError{
						field:  fmt.Sprintf("Subs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuerySubsRspValidationError{
						field:  fmt.Sprintf("Subs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuerySubsRspValidationError{
					field:  fmt.Sprintf("Subs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalNum

	if len(errors) > 0 {
		return QuerySubsRspMultiError(errors)
	}

	return nil
}

// QuerySubsRspMultiError is an error wrapping multiple validation errors
// returned by QuerySubsRsp.ValidateAll() if the designated constraints aren't met.
type QuerySubsRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySubsRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySubsRspMultiError) AllErrors() []error { return m }

// QuerySubsRspValidationError is the validation error returned by
// QuerySubsRsp.Validate if the designated constraints aren't met.
type QuerySubsRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySubsRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySubsRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySubsRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySubsRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySubsRspValidationError) ErrorName() string { return "QuerySubsRspValidationError" }

// Error satisfies the builtin error interface
func (e QuerySubsRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySubsRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySubsRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySubsRspValidationError{}

// Validate checks the field values on QuerySubReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuerySubReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySubReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuerySubReqMultiError, or
// nil if none found.
func (m *QuerySubReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySubReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Eid

	// no validation rules for Sid

	// no validation rules for Pid

	if len(errors) > 0 {
		return QuerySubReqMultiError(errors)
	}

	return nil
}

// QuerySubReqMultiError is an error wrapping multiple validation errors
// returned by QuerySubReq.ValidateAll() if the designated constraints aren't met.
type QuerySubReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySubReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySubReqMultiError) AllErrors() []error { return m }

// QuerySubReqValidationError is the validation error returned by
// QuerySubReq.Validate if the designated constraints aren't met.
type QuerySubReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySubReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySubReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySubReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySubReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySubReqValidationError) ErrorName() string { return "QuerySubReqValidationError" }

// Error satisfies the builtin error interface
func (e QuerySubReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySubReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySubReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySubReqValidationError{}

// Validate checks the field values on QuerySubRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuerySubRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySubRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuerySubRspMultiError, or
// nil if none found.
func (m *QuerySubRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySubRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetSub()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuerySubRspValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuerySubRspValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSub()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuerySubRspValidationError{
				field:  "Sub",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuerySubRspMultiError(errors)
	}

	return nil
}

// QuerySubRspMultiError is an error wrapping multiple validation errors
// returned by QuerySubRsp.ValidateAll() if the designated constraints aren't met.
type QuerySubRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySubRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySubRspMultiError) AllErrors() []error { return m }

// QuerySubRspValidationError is the validation error returned by
// QuerySubRsp.Validate if the designated constraints aren't met.
type QuerySubRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySubRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySubRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySubRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySubRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySubRspValidationError) ErrorName() string { return "QuerySubRspValidationError" }

// Error satisfies the builtin error interface
func (e QuerySubRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySubRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySubRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySubRspValidationError{}
